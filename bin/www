#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('wx-node:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '6868');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */


function onListening(a) {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);

  console.log('---------------------------------------------');
  console.log('- 服务器启动成功，端口：'+ addr.port );
  console.log('- 复制链接到浏览器：http://'+getIPAdress()+':'+ addr.port );
  console.log('---------------------------------------------');
  var URL = 'http://'+getIPAdress()+':'+ addr.port;
   opn_browser(URL);
}


//node如何获取本机local ip
function getIPAdress(){
    var interfaces = require('os').networkInterfaces();
    for(var devName in interfaces){
          var iface = interfaces[devName];
          for(var i=0;i<iface.length;i++){
               var alias = iface[i];
               if(alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal){
                     return alias.address;
               }
          }
    }
}


//打开浏览器
function opn_browser(URL){
  const opn = require('opn');

  // //  在默认图像查看器中打开图像
  // opn (' unicorn.png ')。那么() =>  {
  //     //  图片查看器关闭
  // } ) ;

  //  在默认浏览器中打开网址
  // opn (' http://sindresorhus.com ') ;
   opn(URL);

  // //  指定要打开的应用程序
  // opn (' http://sindresorhus.com '，{ app ：' firefox ' } )   ;

  // //  指定应用参数
  // opn (' http://sindresorhus.com '，{ app ：[ ' google chrome '，'-- incognito ' ] } )    ;
}